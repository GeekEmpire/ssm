<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->
    <!--创建bean的三种方式-->
    <!--第一种：使用默认构造函数创建，具体如下，没有默认构造方法则无法创建-->
<!--    <bean id="accountService" class="com.xmz.service.impl.AccountServiceImpl" scope="singleton" init-method="init" destroy-method="destroy"></bean>-->
    <!--bean作用范围调整
        bean标签的scope属性：用于指定bean作用范围，常用前两种
            singleton:单例（默认值）
            prototype：多例的
            request: 作用于web应用的请求范围
            session：作用于web应用的会话范围
            global-session: 作用于集群环境的会话范围（全局会话范围，当不是集群就是session）
    -->

    <bean id="accountDao" class="com.xmz.dao.impl.AccountDaoImpl" scope="prototype" ></bean>

    <!--第二种：使用普通工厂中的方法创建对象，（使用某个类中的方法创建对象，并存入spring容器中-->
<!--    <bean id="instanceFactory" class="com.xmz.factory.InstanceFactory"></bean>-->
<!--    <bean id="accountService1" factory-bean="instanceFactory" factory-method="getAccountService"></bean>-->

    <!--第三种方法：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象）-->
<!--    <bean id="accountService2" class="com.xmz.factory.StaticFactory" factory-method="getAccountService"></bean>-->

    <!--spring中的依赖注入
        依赖注入：
            Dependency Injection
        在当前累需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        依赖注入：
            能注入的数据：三类
                基本类型和String
                其他Bean类型（在配置文件中或者注解配置过的bean)
                复杂类型/集合类型
           注入的方式：三种
            第一种：使用构造函数提供
            第二种：使用set方法提供
            第三种：使用注解提供
    -->
    <!-- 构造函数注入
        使用标签：constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性：
            type：用于指定要注入的数据类型，该类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置是从0开始的
            name: 用于指定都给构造函数指定名称的参数赋值
            ==========以上参数用于赋值
            value：基本类型
            ref：其他Bean类型
        特点：获取对象时，注入数据是必须的操作，如果用不到这些数据也必须提供
    -->
    <bean id="accountService" class="com.xmz.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="test"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>
    <!--配置一个日期对象-->
    <bean id="now" class="java.util.Date"></bean>

    <!--方式二：set方法注入，常用该方法
           涉及标签：property  属性：name，value，ref
          优势：没有明确的限制，可以直接使用默认构造函数
    -->
    <bean id="accountService1" class="com.xmz.service.impl.AccountServiceImpl1">
        <property name="name" value="TEST"></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>
    </bean>

    <!--复杂类型\集合类型的注入-->
    <bean id="accountService2" class="com.xmz.service.impl.AccountServiceImpl2">
        <property name="myStrs">
            <array>
                <value>111</value>
                <value>222</value>
                <value>333</value>
            </array>
        </property>
        <property name="myList">
            <array>
                <value>111</value>
                <value>222</value>
                <value>333</value>
            </array>
        </property>
        <property name="mySet">
            <array>
                <value>111</value>
                <value>222</value>
                <value>333</value>
            </array>
        </property>
        <property name="myMap">
            <props>
                <prop key="testA">111</prop>
                <prop key="testB">222</prop>
                <prop key="testC">333</prop>
            </props>
        </property>
        <property name="myProps">
            <map>
                <entry key="testA">
                    <value>111</value>
                </entry>
                <entry key="testB" value="222"></entry>
                <entry key="testC" value="333"></entry>
            </map>
        </property>
    </bean>

</beans>