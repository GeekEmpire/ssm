<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xmz.dao.IUserDao">
    <!--配置查询结果的列名和实体类的属性的对应关系-->
    <resultMap id="userAccountMap" type="user">
        <!-- 取完别名后可用<resultMap id="userMap" type="user">-->
        <!--主键字段的对应-->
        <id property="id" column="id"></id>
        <!--非主键字段的对应-->
        <result property="username" column="username"></result>
        <result property="address" column="address"></result>
        <result property="sex" column="sex"></result>
        <result property="birthday" column="birthday"></result>
        <!--配置user对象中accounts集合的映射-->
        <collection property="accounts" ofType="account" select="com.xmz.dao.IAccountDao.findAccountById" column="id">
<!--            <id column="id" property="id"></id>-->
<!--            <result column="uid" property="uid"></result>-->
<!--            <result column="money" property="money"></result>-->
        </collection>
    </resultMap>

    <!--了解的内容，抽取重复的sql语句-->
    <sql id="defaultUser">
        select * from user
    </sql>
    
    <select id="findAll" resultMap="userAccountMap">
        select * from user
    </select>
<!--    <select id="findAll" resultMap="userAccountMap">-->
<!--        <include refid="defaultUser"></include>;-->
<!--    </select>-->
    <!--
        <select id="findAll" resultMap="userMap">
            select id as userId, username as userName, address as userAddress, sex as userSex, birthday as userBirthday from user;
        </select>
    -->

    <insert id="saveUser" parameterType="com.xmz.domain.User">
        <!--配置插入操作后，获取数据的id-->
        <selectKey keyProperty="id" keyColumn="id" order="AFTER" resultType="int">
            select last_insert_id();
        </selectKey>
        insert into user(username, address, sex, birthday) values (#{username}, #{address}, #{sex}, #{birthday});
    </insert>

    <update id="updateUser" parameterType="com.xmz.domain.User">
        update user set username=#{username}, address=#{address}, sex=#{sex}, birthday=#{birthday} where id=#{id};
    </update>

    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id=#{id};
    </delete>

    <select id="findById" parameterType="INT" resultType="com.xmz.domain.User">
        select * from user where id = #{id};
    </select>

    <select id="findByName" parameterType="String" resultType="com.xmz.domain.User">
        select * from user where username like #{username};<!--这种更好，下面的了解一下-->
        <!-- select * from user where username like '%${value}%';-->
    </select>

    <select id="findTotal" resultType="int">
        select count(id) from user;
    </select>

    <select id="findUserByVo" parameterType="com.xmz.domain.QueryVo" resultType="com.xmz.domain.User">
        select * from user where username like #{user.username};
    </select>


    <select id="findUserByCondition" resultType="com.xmz.domain.User" parameterType="user">
        select * from user
        <where>
            <if test="username!=null">
                and username like #{username}
            </if>
            <if test="sex!=null">
                and sex like #{sex}
            </if>
        </where>
<!--        select * from user where 1=1-->
<!--        <if test="username!=null">-->
<!--            and username like #{username}-->
<!--        </if>-->
<!--        <if test="sex!=null">-->
<!--            and sex like #{sex}-->
<!--        </if>-->
    </select>

    <select id="findUserInIds" resultType="com.xmz.domain.User" parameterType="queryvo">
--         select * from user
        <include refid="defaultUser"></include>
        <where>
            <if test="ids!=null and ids.size()>0">
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>



</mapper>